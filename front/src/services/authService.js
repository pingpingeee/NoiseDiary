import api from "./api"

export const authService = {
  // Î°úÍ∑∏Ïù∏ (Ïø†ÌÇ§ Î∞©Ïãù)
  login: async (credentials) => {
    try {
      console.log("üîê Login attempt:", { userId: credentials.userId })

      const response = await api.post("/auth/login", {
        userId: credentials.userId,
        password: credentials.password,
      })

      console.log("‚úÖ Login response received:", {
        status: response.status,
        hasUser: !!response.data.user,
        message: response.data.message,
      })

      // Ïø†ÌÇ§ Î∞©ÏãùÏóêÏÑúÎäî ÏÑúÎ≤ÑÍ∞Ä ÏûêÎèôÏúºÎ°ú Ïø†ÌÇ§Î•º ÏÑ§Ï†ï
      // ÏùëÎãµ Î≥∏Î¨∏ÏóêÏÑúÎäî ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Îßå ÌôïÏù∏
      if (response.data.user) {
        // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Îßå localStorageÏóê Ï†ÄÏû• (ÏÑ†ÌÉùÏÇ¨Ìï≠)
        localStorage.setItem("user", JSON.stringify(response.data.user))
        console.log("üíæ User info saved to localStorage")

        // Ïø†ÌÇ§ÏóêÏÑú ÌÜ†ÌÅ∞ ÌôïÏù∏
        const tokenFromCookie = authService.getTokenFromCookie()
        console.log("üç™ Token in cookie:", !!tokenFromCookie)

        return {
          success: true,
          user: response.data.user,
          message: response.data.message || "Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ",
          tokenInCookie: !!tokenFromCookie,
        }
      } else {
        console.error("‚ùå No user data in response:", response.data)
        throw new Error(response.data.message || "ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.")
      }
    } catch (error) {
      console.error("‚ùå Login error:", {
        message: error.message,
        status: error.response?.status,
        data: error.response?.data,
      })
      throw error
    }
  },

  // Ïø†ÌÇ§ÏóêÏÑú ÌÜ†ÌÅ∞ Í∞ÄÏ†∏Ïò§Í∏∞
  getTokenFromCookie: () => {
    const cookies = document.cookie.split(";")
    for (const cookie of cookies) {
      const [name, value] = cookie.trim().split("=")
      if (name === "accessToken") {
        return value
      }
    }
    return null
  },

  // Ïø†ÌÇ§ÏóêÏÑú ÌÜ†ÌÅ∞ ÌÉÄÏûÖ Í∞ÄÏ†∏Ïò§Í∏∞
  getTokenTypeFromCookie: () => {
    const cookies = document.cookie.split(";")
    for (const cookie of cookies) {
      const [name, value] = cookie.trim().split("=")
      if (name === "tokenType") {
        return value
      }
    }
    return "Bearer"
  },

  // ÌÜ†ÌÅ∞ Í≤ÄÏ¶ù (Ïø†ÌÇ§ Î∞©Ïãù)
  validateToken: async () => {
    try {
      console.log("üîç Validating token from cookie...")
      const response = await api.post("/auth/validate-token")

      console.log("‚úÖ Token validation response:", response.data)
      return response.data.valid || false
    } catch (error) {
      console.error("‚ùå Token validation error:", error)
      return false
    }
  },

  // Î°úÍ∑∏ÏïÑÏõÉ (Ïø†ÌÇ§ Î∞©Ïãù)
  logout: async () => {
    try {
      console.log("üö™ Logging out...")
      await api.post("/auth/logout")

      // localStorageÏùò ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Îßå ÏÇ≠Ï†ú (Ïø†ÌÇ§Îäî ÏÑúÎ≤ÑÏóêÏÑú ÏÇ≠Ï†ú)
      localStorage.removeItem("user")
      console.log("üßπ User info cleared from localStorage")
      console.log("üç™ Cookies cleared by server")
    } catch (error) {
      console.error("‚ùå Logout error:", error)
      // ÏóêÎü¨Í∞Ä Î∞úÏÉùÌï¥ÎèÑ Î°úÏª¨ Ï†ïÎ≥¥Îäî ÏÇ≠Ï†ú
      localStorage.removeItem("user")
    }
  },

  // ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  getCurrentUser: () => {
    try {
      const userStr = localStorage.getItem("user")
      return userStr ? JSON.parse(userStr) : null
    } catch (error) {
      console.error("‚ùå Error parsing user data:", error)
      return null
    }
  },

  // Ïù∏Ï¶ù ÏÉÅÌÉú ÌôïÏù∏ (Ïø†ÌÇ§ Î∞©Ïãù)
  isAuthenticated: () => {
    const tokenFromCookie = authService.getTokenFromCookie()
    const user = authService.getCurrentUser()
    const isAuth = !!(tokenFromCookie && user)
    console.log("üîê Authentication check:", {
      hasTokenInCookie: !!tokenFromCookie,
      hasUser: !!user,
      isAuthenticated: isAuth,
    })
    return isAuth
  },

  // ÎîîÎ≤ÑÍπÖÏö© - ÌòÑÏû¨ Ï†ÄÏû•Îêú Ï†ïÎ≥¥ Ï∂úÎ†•
  debugInfo: () => {
    const tokenFromCookie = authService.getTokenFromCookie()
    const tokenType = authService.getTokenTypeFromCookie()
    console.log("üêõ Debug Info (Cookie Mode):", {
      tokenInCookie: tokenFromCookie ? tokenFromCookie.substring(0, 20) + "..." : null,
      tokenType: tokenType,
      user: authService.getCurrentUser(),
      isAuthenticated: authService.isAuthenticated(),
      allCookies: document.cookie,
    })
  },
}
