package com.noise_diary.com.user.service;

import com.noise_diary.com.entity.UserInfo;
import com.noise_diary.com.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.Optional;

@Service
public class UserService {
    
    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private PasswordEncoder passwordEncoder;
    
    // 사용자 등록
    public UserInfo registerUser(UserInfo userInfo) {
        // 비밀번호 암호화
        userInfo.setPassword(passwordEncoder.encode(userInfo.getPassword()));
        return userRepository.save(userInfo);
    }
    
    // 사용자 조회
    public Optional<UserInfo> findByUserId(String userId) {
        return userRepository.findByUserId(userId);
    }
    
    // 로그인 시간 업데이트
    public void updateLastLoginDate(String userId) {
        userRepository.findByUserId(userId).ifPresent(user -> {
            user.setLastLoginDate(LocalDateTime.now());
            userRepository.save(user);
        });
    }
    
    // 사용자 ID 중복 확인
    public boolean isUserIdExists(String userId) {
        return userRepository.existsByUserId(userId);
    }
    
    // 이메일 중복 확인
    public boolean isEmailExists(String email) {
        return userRepository.existsByEmail(email);
    }
}